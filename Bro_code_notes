                    |     https://www.youtube-nocookie.com/embed/XKHEtdqhLK8?playlist=XKHEtdqhLK8&autoplay=1&iv_load_policy=3&loop=1&modestbranding=1&start= |
                   /__________________________________________________________________________________________________________________________________________\




----------------------------------------------------- Strig Functions -----------------------------------------------------------------------------------------------------

name = "Eleftheria"

print(len(name))       # ---> for str length     				
print(type(name))            # ---> for value type
print(name.find("e"))         # ---> to find the position  of a char in the str
print(name.capitalize())    # ---> to capitalize the first letter
print(name.lower())        # ---> make all char lower
print(name.upper())      # ---> make all char upper
print(name.isdigit())      # --> returns True or False
print(name.isalpha())  # --> to check if there are only alphanumeric char -- if there is a space it will return False
print(name.count("ria"))    # --> to count how many char in the str
print(name.replace("e", "a")) # --> to replace a char with another char everywhere in the str
print(name*3)    # --> will print the str times the number we want


------------------------- Str slicing 

# slicing = create a substring by extracting elements from another string
#           indexing[] or slice()
#           [start:stop:step]

name = "Bro Code"

first_name = name[:3]       # [0:3]
last_name = name[4:]        # [4:end]
funky_name = name[::2]      # [0:end:2]
reversed_name = name[::-1]  # [0:end:-1]

print(reversed_name)

website1 = "http://google.com"
website2 = "http://wikipedia.com"

slice = slice(7,-4)

print(website1[slice])
print(website2[slice])

------------------------------------------------------------Int functions----------------------------------------------------------------------------------------------------------

import math

pi = 3.14
x = 1
y = 2
z = 3
 
print(round(pi))    # --> it rounds  the float number
print(math.ceil(pi))     # --> it rounds up
print(math.floor(pi))    # ---> it rounds down
print(abs(pi)) # --> for the absolute value of the number ( = how far is from 0 )
print(pow(pi, 3))    # --> raises to power - first we put the value we want( in this case pi, and then the power)
print(math.sqrt(pi)) # --> for square root
print(max(x, y, z))  # --> find the max value
print(min(x, y, z))   # ---> find the min value


------------------------------------------------------------Logical Operators ----------------------------------------------------------------------------------------------------------



Pinned by Bro Code
Bro Code
1 year ago
# logical operators (and,or,not) = used to check if two or more conditional statements is true

temp = int(input("What is the temperature outside?: "))

if temp >= 0 and temp <= 30:
    print("the temperature is good today!")
    print("go outside!")
elif temp < 0 or temp > 30:
    print("the temperature is bad today!")
    print("stay inside!")
    
    
    
    # to use operator "not" :
    
if not(temp >= 0 and temp <= 30):
    print("the temperature is good today!")
    print("go outside!")

------------------------------------------------------------For loop + sleep ----------------------------------------------------------------------------------------------------------


# for loop =    a statement that will execute it's block of code
#                      a limited amount of times
#
#                     while loop = unlimited
#                     for loop = limited

import time

#for i in range(10):
    #print(i+1)

#for i in range(50,100+1,2):
    #print(i)

#for i in "Bro Code":
    #print(i)

for seconds in range(10,0,-1):
    print(seconds)
    time.sleep(1)
print("Happy New Year!")

------------------------------------------------------------Nested loops ----------------------------------------------------------------------------------------------------------



# nested loops =    The "inner loop" will finish all of it's iterations before
#                   finishing one iteration of the "outer loop"

rows = int(input("How many rows?: "))
columns = int(input("How many columns?: "))
symbol = input("Enter a symbol to use: ")

for i in range(rows):
    for j in range(columns):
        print(symbol, end="")
    print()
    
    
--------------------------------------------------------- Loop control statements ----------------------------------------------------------------------------------------------------------


# Loop Control Statements = change a loops execution from its normal sequence

# break =       used to terminate the loop entirely
# continue =    skips to the next iteration of the loop.
# pass =        does nothing, acts as a placeholder

while True:
    name = input("Enter your name: ")
    if name != "":
        break

phone_number = "123-456-7890"
for i in phone_number:
    if i == "-":
        continue
    print(i, end="")

for i in range(1,21):
    if i == 13:
        pass
    else:
        print(i)



----------------------------------------------------------------- Lists ----------------------------------------------------------------------------------------------------------


# list = used to store multiple items in a single variable

food = ["pizza","hamburger","hotdog","spaghetti","pudding"]

food[0] = "sushi"

#food.append("ice cream")    # adds an element in the end of the list 
#food.remove("hotdog")
#food.pop()                    # deleted last element of the list 
#food.insert(0,"cake")      # insterts an element in any index position we want
#food.sort()              # sorts alphabetically
#food.clear()          # deleted all elements in the list 

for x in food:
    print(x)


-------------------------Python 2D lists / two dimensional list

# 2D lists = a list of lists

drinks = ["coffee","soda","tea"]
dinner = ["pizza","hamburger","hotdog"]
dessert = ["cake","ice cream"]

food = [drinks,dinner,dessert]

print(food[0][0])




--------------------------------------------------------- Tuples ----------------------------------------------------------------------------------------------------------

# tuple =   collection which is ordered and unchangeable
#                used to group together related data

student = ("Bro",21,"male")

print(student.count("Bro"))
print(student.index("male"))

for x in student:
    print(x)

if "Bro" in student:
    print("Bro is here!")





--------------------------------------------------------- Sets ----------------------------------------------------------------------------------------------------------

# set = collection which is unordered, unindexed. No duplicate values

utensils = {"fork","spoon","knife"}
dishes = {"bowl","plate","cup","knife"}

#utensils.add("napkin")   # adds an element in the set 
#utensils.remove("fork")   # removes an element from the set 
#utensils.clear()         # deletes all elements in the set 
#dishes.update(utensils)   # adds all elements from another set  ( if an elements exists in both sets, it will appear only once)
#dinner_table = utensils.union(dishes) # unites all the elements of two sets in a new set 

#print(dishes.difference(utensils))   # prints the different elements of two sets 
#print(utensils.intersection(dishes))   # prints the common elements of two sets 

for x in utensils:
    print(x)


--------------------------------------------------------- Dictionaries ----------------------------------------------------------------------------------------------------------

# dictionary comprehension = create dictionaries using an expression
#                            can replace for loops and certain lambda functions
#
# dictionary = {key: expression for (key,value) in iterable}
# dictionary = {key: expression for (key,value) in iterable if conditional}
# dictionary = {key: (if/else) for (key,value) in iterable}
# dictionary = {key: function(value) for (key,value) in iterable}
# -------------------------------------------------------------------------
cities_in_F = {'New York': 32, 'Boston': 75, 'Los Angeles': 100, 'Chicago': 50}
cities_in_C = {key: round((value-32)*(5/9)) for (key,value) in cities_in_F.items()}
print(cities_in_C)

# -------------------------------------------------------------------------
# weather = {'New York': "snowing", 'Boston': "sunny", 'Los Angeles': "sunny", 'Chicago': "cloudy"}
# sunny_weather = {key: value for (key,value) in weather.items() if value == "sunny"}
# print(sunny_weather)

# -------------------------------------------------------------------------
# cities = {'New York': 32, 'Boston': 75, 'Los Angeles': 100, 'Chicago': 50}
# desc_cities = {key: ("WARM" if value >= 40 else "COLD") for (key,value) in cities.items()}
# print(desc_cities)

# -------------------------------------------------------------------------
# def check_temp(value):
    # if value >= 70:
        # return "HOT"
    # elif 69 >= value >= 40:
        # return "WARM"
    # else:
        # return "COLD"


# cities = {'New York': 32, 'Boston': 75, 'Los Angeles': 100, 'Chicago': 50}
# desc_cities = {key: check_temp(value) for (key,value) in cities.items()}
# print(desc_cities)





--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------


# index operator [] = gives access to a sequence’s element (str,list,tuples)

name = "bro Code!"

#if(name[0].islower()):
   #name = name.capitalize()
  
first_name = name[:3].upper()
last_name = name[4:].lower()
last_character = name[-1]

print(first_name)
print(last_name)
print(last_character)




--------------------------------------------------------- Functions  ----------------------------------------------------------------------------------------------------------

# function = a block of code which is executed only when it is called.

def hello(first_name,last_name,age):
    print("hello "+first_name+" "+last_name)
    print("You are "+str(age)+" years old")
    print("Have a nice day!")

hello("Bro","Code",21)


--------------------- Return statement  

# return statement = Functions send Python values/objects back to the caller.
#                    These values/objects are known as the function’s return value

def multiply(number1,number2):
    return number1 * number2

x = multiply(6,8)

print(x)



--------------------------------------------------------- Keyword arguments----------------------------------------------------------------------------------------------------------


# keyword arguments =   arguments preceded by an identifier when we pass them to a function
#                       The order of the arguments doesn't matter, unlike positional arguments
#                       Python knows the names of the arguments that a function receives

def hello(first,middle,last):
    print("Hello "+first+" "+middle+" "+last)


hello(last="Code",middle="Dude",first="Bro")





--------------------------------------------------------- Nested function calls ----------------------------------------------------------------------------------------------------------

# nested functions calls =  function calls inside other function calls
#                           innermost function calls are resolved first
#                           returned value is used as argument for the next outer function

# num = input("Enter a whole positive number: ")
# num = float(num)
# num = abs(num)
# num = round(num)
# print(num)

print(round(abs(float(input("Enter a whole positive number: ")))))




--------------------------------------------------------- Variable scope ----------------------------------------------------------------------------------------------------------

# scope = The region that a variable is recognized
#         A variable is only available from inside the region it is created.
#         A global and locally scoped versions of a variable can be created

name = "Bro" # global scope (available inside & outside functions)

def display_name():
    name = "Code"    # local scope (available only inside this function)
    print(name)


display_name()
print(name)




--------------------------------------------------------- *args ----------------------------------------------------------------------------------------------------------

# *args =   parameter that will pack all arguments into a tuple
#                 useful so that a function can accept a varying amount of arguments

def add(*args):
    sum = 0
    for i in args:
        sum += i
    return sum

print(add(1,2,3,4,5,6,7,8))




--------------------------------------------------------- **kwargs  ----------------------------------------------------------------------------------------------------------


# *args =   parameter that will pack all arguments into a tuple
#                 useful so that a function can accept a varying amount of arguments

def add(*args):
    sum = 0
    for i in args:
        sum += i
    return sum

print(add(1,2,3,4,5,6,7,8))




--------------------------------------------------------- String format ----------------------------------------------------------------------------------------------------------

# str.format() =    optional method that gives users
#                   more control when displaying output

animal = "cow"
item = "moon"

print("The "+animal+" jumped over the "+item)

# {} = format field
print("The {} jumped over the {}".format("cow","moon"))
print("The {0} jumped over the {1}".format(animal,item)) # positional arguments
print("The {animal} jumped over the {item}".format(animal="cow",item="moon"))   # keyword arguments

text = "The {} jumped over the {}"
print(text.format("cow","moon"))

name = "Bro"

print("My name is {}".format(name))
print("My name is {:10}".format(name,name))   # amount of padding
print("My name is {:<10}".format(name,name))  # < = left align
print("My name is {:>10}".format(name,name))  # > = right align
print("My name is {:^10}".format(name,name))  # ^ = center align


# str.format() =    optional method that gives users
#                   more control when displaying output

number = 1000

print("The number pi is {:.3f}".format(number))
print("The number is {:,}".format(number))
print("The number is {:b}".format(number))
print("The number is {:o}".format(number))
print("The number is {:X}".format(number))
print("The number is {:E}".format(number))




--------------------------------------------------------- Random numbers  ----------------------------------------------------------------------------------------------------------

import random

x = random.randint(1,6)
y = random.random()

myList = ['rock','paper','scissors']
z = random.choice(myList)

cards = [1,2,3,4,5,6,7,8,9,"J","Q","K","A"]

random.shuffle(cards)

print(cards)




--------------------------------------------------------- Exception handling ----------------------------------------------------------------------------------------------------------

# exception =   events detected during execution that interrupt the flow of a program

try:
    numerator = int(input("Enter a number to divide: "))
    denominator = int(input("Enter a number to divide by: "))
    result = numerator / denominator
except ZeroDivisionError as e:
    print(e)
    print("You can't divide by zero! idiot!")
except ValueError as e:
    print(e)
    print("Enter only numbers plz")
except Exception as e:
    print(e)
    print("something went wrong :(")
else:
    print(result)
finally:
    print("This will always execute")



--------------------------------------------------------- File detection ----------------------------------------------------------------------------------------------------------

import os

path = "C:\\Users\\User\\Desktop\\test.txt"

if os.path.exists(path):
    print("That location exists!")
    if os.path.isfile(path):
        print("That is a file")
    elif os.path.isdir(path):
        print("That is a directory!")
else:
    print("That location doesn't exist!")




--------------------------------------------------------- Read a file ----------------------------------------------------------------------------------------------------------

text = "Yooooooooo\nThis is some text\nHave a good one!\n"

with open('test.txt','w') as file:
    file.write(text)




--------------------------------------------------------- Write a file ----------------------------------------------------------------------------------------------------------


try:
    with open('test.txt') as file:
        print(file.read())
except FileNotFoundError:
    print("That file was not found :(")





--------------------------------------------------------- Copy a file  ----------------------------------------------------------------------------------------------------------

# copyfile() =  copies contents of a file
# copy() =      copyfile() + permission mode + destination can be a directory
# copy2() =     copy() + copies metadata (file’s creation and modification times)

import shutil

shutil.copyfile('test.txt','copy.txt') #src,dst







--------------------------------------------------------- Move a file ----------------------------------------------------------------------------------------------------------


import os

source = "C:\\Users\\User\\Desktop\\source.txt"
destination = "C:\\Users\\User\\Desktop\\destination.txt"

try:
    if os.path.exists(destination):
        print("There is already a file there")
    else:
        os.replace(source,destination)
        print(source+" was moved")
except FileNotFoundError:
    print(source+" was not found")






--------------------------------------------------------- Delete a file ----------------------------------------------------------------------------------------------------------


import os
import shutil

path = "test.txt"

try:
    os.remove(path)    #delete a file
    #os.rmdir(path)     #delete an empty directory
    #shutil.rmtree(path)#delete a directory containing files
except FileNotFoundError:
    print("That file was not found")
except PermissionError:
    print("You do not have permission to delete that")
except OSError:
    print("You cannot delete that using that function")
else:
    print(path+" was deleted")







--------------------------------------------------------- Modules  ----------------------------------------------------------------------------------------------------------

# module = a file containing python code. May contain functions, classes etc.
# used with modular programming, which is to separate a program into paths

import messages as msg      ---> to import the whole modulefinde

msg.hello()
msg.by()

from messages improt hello, bye --> to import specific functions
from messages import * --> to import everything

hello()
bye()


**************************************************
help("modules")         ---> this will populate the list of all the available modules for python






--------------------------------------------------------- Rock, paper, scissors game ----------------------------------------------------------------------------------------------------------


# **************************************************************
import random

while True:
    choices = ["rock","paper","scissors"]

    computer = random.choice(choices)
    player = None

    while player not in choices:
        player = input("rock, paper, or scissors?: ").lower()

    if player == computer:
        print("computer: ",computer)
        print("player: ",player)
        print("Tie!")

    elif player == "rock":
        if computer == "paper":
            print("computer: ", computer)
            print("player: ", player)
            print("You lose!")
        if computer == "scissors":
            print("computer: ", computer)
            print("player: ", player)
            print("You win!")

    elif player == "scissors":
        if computer == "rock":
            print("computer: ", computer)
            print("player: ", player)
            print("You lose!")
        if computer == "paper":
            print("computer: ", computer)
            print("player: ", player)
            print("You win!")

    elif player == "paper":
        if computer == "scissors":
            print("computer: ", computer)
            print("player: ", player)
            print("You lose!")
        if computer == "rock":
            print("computer: ", computer)
            print("player: ", player)
            print("You win!")

    play_again = input("Play again? (yes/no): ").lower()

    if play_again != "yes":
        break

print("Bye!")
# **************************************************************





--------------------------------------------------------- Quiz game ----------------------------------------------------------------------------------------------------------

def new_game():

    guesses = []
    correct_guesses = 0
    question_num = 1

    for key in questions:
        print("-------------------------")
        print(key)
        for i in options[question_num-1]:
            print(i)
        guess = input("Enter (A, B, C, or D): ")
        guess = guess.upper()
        guesses.append(guess)

        correct_guesses += check_answer(questions.get(key), guess)
        question_num += 1

    display_score(correct_guesses, guesses)

# -------------------------
def check_answer(answer, guess):

    if answer == guess:
        print("CORRECT!")
        return 1
    else:
        print("WRONG!")
        return 0

# -------------------------
def display_score(correct_guesses, guesses):
    print("-------------------------")
    print("RESULTS")
    print("-------------------------")

    print("Answers: ", end="")
    for i in questions:
        print(questions.get(i), end=" ")
    print()

    print("Guesses: ", end="")
    for i in guesses:
        print(i, end=" ")
    print()

    score = int((correct_guesses/len(questions))*100)
    print("Your score is: "+str(score)+"%")

# -------------------------
def play_again():

    response = input("Do you want to play again? (yes or no): ")
    response = response.upper()

    if response == "YES":
        return True
    else:
        return False
# -------------------------


questions = {
 "Who created Python?: ": "A",
 "What year was Python created?: ": "B",
 "Python is tributed to which comedy group?: ": "C",
 "Is the Earth round?: ": "A"
}

options = [["A. Guido van Rossum", "B. Elon Musk", "C. Bill Gates", "D. Mark Zuckerburg"],
          ["A. 1989", "B. 1991", "C. 2000", "D. 2016"],
          ["A. Lonely Island", "B. Smosh", "C. Monty Python", "D. SNL"],
          ["A. True","B. False", "C. sometimes", "D. What's Earth?"]]

new_game()

while play_again():
    new_game()

print("Byeeeeee!")






--------------------------------------------------------- Object Oriented Programming (OOP) ----------------------------------------------------------------------------------------------------------

from car import Car

car_1 = Car("Chevy","Corvette",2021,"blue")
car_2 = Car("Ford","Mustang",2022,"red")

car_1.drive()
car_2.stop()
#------------------------------------------------------------------
class Car:

    def __init__(self,make,model,year,color):
        self.make = make
        self.model = model
        self.year = year
        self.color = color

    def drive(self):
        print("This "+self.model+" is driving")

    def stop(self):
        print("This "+self.model+" is stopped")





--------------------------------------------------------- Class variables ----------------------------------------------------------------------------------------------------------

#---------------------------------------------------------------------
from car import Car

car_1 = Car("Chevy","Corvette",2021,"blue")
car_2 = Car("Ford","Mustang",2022,"red")

#Car.wheels = 2

print(car_1.wheels)
print(car_2.wheels)
#---------------------------------------------------------------------
class Car:

    wheels = 4 #class variable

    def __init__(self,make,model,year,color):
        self.make = make    #instance variable
        self.model = model  #instance variable
        self.year = year    #instance variable
        self.color = color  #instance variable
#---------------------------------------------------------------------





--------------------------------------------------------- Inheritance  ----------------------------------------------------------------------------------------------------------

class Animal:

    alive = True

    def eat(self):
        print("This animal is eating")

    def sleep(self):
        print("This animal is sleeping")

class Rabbit(Animal):

    def run(self):
        print("This rabbit is running")

class Fish(Animal):

    def swim(self):
        print("This fish is swimming")

class Hawk(Animal):

    def fly(self):
        print("This hawk is flying")


rabbit = Rabbit()
fish = Fish()
hawk = Hawk()

print(rabbit.alive)
fish.eat()
hawk.sleep()

rabbit.run()
fish.swim()
hawk.fly()








--------------------------------------------------------- Multilevel inheritance ----------------------------------------------------------------------------------------------------------

# multi-level inheritance = when a derived (child) class inherits another derived (child) class

class Organism:

    alive = True

class Animal(Organism):

    def eat(self):
        print("This animal is eating")

class Dog(Animal):

    def bark(self):
        print("This dog is barking")


dog = Dog()
print(dog.alive)    # inherited from the Organism class
dog.eat()           # inherited from the Animal class
dog.bark()          # defined in Dog class




--------------------------------------------------------- Multiple  inheritance ----------------------------------------------------------------------------------------------------------
# multiple inheritance = when a child class is derived from more than one parent class

class Prey:

    def flee(self):
        print("This animal flees")

class Predator:

    def hunt(self):
        print("This animal is hunting")

class Rabbit(Prey):
    pass

class Hawk(Predator):
    pass

class Fish(Prey, Predator):
    pass


rabbit = Rabbit()
hawk = Hawk()
fish = Fish()

# rabbit.flee()
# hawk.hunt()
fish.flee()
fish.hunt()



--------------------------------------------------------- Method overriding ----------------------------------------------------------------------------------------------------------

class Animal:

    def eat(self):
        print("This animal is eating")

class Rabbit(Animal):

    def eat(self):
        print("This rabbit is eating a carrot")


rabbit = Rabbit()
rabbit.eat()



--------------------------------------------------------- Method chaining  ----------------------------------------------------------------------------------------------------------

# method chaining = calling multiple methods sequentially
#                   each call performs an action on the same object and returns self

class Car:

    def turn_on(self):
        print("You start the engine")
        return self

    def drive(self):
        print("You drive the car")
        return self

    def brake(self):
        print("You step on the brakes")
        return self

    def turn_off(self):
        print("You turn off the engine")
        return self


car = Car()

# car.turn_on().drive()
# car.brake().turn_off()
#car.turn_on().drive().brake().turn_off()

car.turn_on()\
    .drive()\
    .brake()\
    .turn_off()




--------------------------------------------------------- Super function  ----------------------------------------------------------------------------------------------------------


# super() = Function used to give access to the methods of a parent class.
#           Returns a temporary object of a parent class when used

class Rectangle:

    def __init__(self, length, width):
        self.length = length
        self.width = width

class Square(Rectangle):

    def __init__(self, length, width):
        super().__init__(length,width)

    def area(self):
        return self.length*self.width

class Cube(Rectangle):

    def __init__(self, length, width, height):
        super().__init__(length,width)
        self.height = height

    def volume(self):
        return self.length*self.width*self.height


square = Square(3, 3)
cube = Cube(3, 3, 3)

print(square.area())
print(cube.volume())




--------------------------------------------------------- Abstract classes  ----------------------------------------------------------------------------------------------------------


#abstract class = a class which contains one or more abstract methods.
#abstract method = a method that has a declaration but does not have an implementation.

# prevents a user from creating an object of that class
# + compels a user to override abstract methods in a child class

from abc import ABC, abstractmethod

class Vehicle(ABC):

    @abstractmethod
    def go(self):
        pass

    @abstractmethod
    def stop(self):
        pass

class Car(Vehicle):

    def go(self):
        print("You drive the car")

    def stop(self):
        print("This car is stopped")

class Motorcycle(Vehicle):

    def go(self):
        print("You ride the motorcycle")

    def stop(self):
        print("This motorcycle is stopped")


#vehicle = Vehicle()
car = Car()
motorcycle = Motorcycle()

#vehicle.go()
car.go()
motorcycle.go()

#vehicle.stop()
car.stop()
motorcycle.stop()



--------------------------------------------------------- Objects as arguments  ----------------------------------------------------------------------------------------------------------


class Car:

    color = None

class Motorcycle:

    color = None

def change_color(vehicle,color):

    vehicle.color = color


car_1 = Car()
car_2 = Car()
car_3 = Car()

bike_1 = Motorcycle()

change_color(car_1,"red")
change_color(car_2,"white")
change_color(car_3,"blue")
change_color(bike_1,"black")

print(car_1.color)
print(car_2.color)
print(car_3.color)
print(bike_1.color)



--------------------------------------------------------- Duck typing  ----------------------------------------------------------------------------------------------------------

# duck typing = concept where the class of an object is less important than the methods/attributes
#               class type is not checked if minimum methods/attributes are present
#               “If it walks like a duck, and it quacks like a duck, then it must be a duck.”

class Duck:

    def walk(self):
        print("This duck is walking")

    def talk(self):
        print("This duck is qwuacking")

class Chicken:

    def walk(self):
        print("This chicken is walking")

    def talk(self):
        print("This chicken is clucking")

class Person():

    def catch(self, duck):
        duck.walk()
        duck.talk()
        print("You caught the critter!")


duck = Duck()
chicken = Chicken()
person = Person()

person.catch(chicken)




--------------------------------------------------------- Walrus operator  ----------------------------------------------------------------------------------------------------------

# walrus operator :=

# new to Python 3.8
# assignment expression aka walrus operator
# assigns values to variables as part of a larger expression

# happy = True
# print(happy)

# print(happy := True)

# foods = list()
# while True:
#   food = input("What food do you like?: ")
#       if food == "quit":
#           break
#   foods.append(food)

foods = list()
while (food := input("What food do you like?: ")) != "quit":
    foods.append(food)




--------------------------------------------------------- Functions to variables ----------------------------------------------------------------------------------------------------------

def hello():
    print("Hello")


hi = hello
hi()

# say = print
# say("Whoa! I can't believe this works! :O")





--------------------------------------------------------- Higher order functions ----------------------------------------------------------------------------------------------------------

#  Higher Order Function =  a function that either:
#                           1. accepts a function as an argument
#                               or
#                           2. returns a function
#                           (In python, functions are also treated as objects)

# ----- 1. accepts a function as an argument ----- 
def loud(text):
   return text.upper()

def quiet(text):
   return text.lower()

def hello(func):
   text = func("Hello")
   print(text)


hello(loud)
hello(quiet)

# ------------ 2. returns a function ------------- 
#def divisor(x):
   #def dividend(y):
       #return y / x
   #return dividend


#divide = divisor(2)
#print(divide(10))




--------------------------------------------------------- lambda λ  ----------------------------------------------------------------------------------------------------------


# lambda function = function written in 1 line using lambda keyword
#                   accepts any number of arguments, but only has one expression.
#                   (think of it as a shortcut)
#                   (useful if needed for a short period of time, throw-away)
#
# lambda parameters:expression

double = lambda x: x * 2
print(double(1))

multiply = lambda x, y: x * y
print(multiply(1,2))

add = lambda x, y, z: x + y + z
print(add(1,2,3))

full_name = lambda first_name, last_name: first_name+" "+last_name
print(full_name("Bro","Code"))





--------------------------------------------------------- Sort ----------------------------------------------------------------------------------------------------------


# sort() method   = used with lists
# sort() function = used with iterables

students = (("Squidward", "F", 60),
            ("Sandy", "A", 33),
            ("Patrick","D", 36),
            ("Spongebob","B", 20),
            ("Mr.Krabs","C", 78))

grade = lambda grades:grades[1]
# students.sort(key=age)                     # sorts current list
sorted_students = sorted(students,key=grade) # sorts and creates a new list

for i in sorted_students:
    print(i)



--------------------------------------------------------- Map ----------------------------------------------------------------------------------------------------------


# map() =   applies a function to each item in an iterable (list, tuple, etc.)
#
# map(function,iterable)

store = [("shirt",20.00),
         ("pants",25.00),
         ("jacket",50.00),
         ("socks",10.00)]

to_euros = lambda data: (data[0],data[1]*0.82)
# to_dollars = lambda data: (data[0],data[1]/0.82)

store_euros = list(map(to_euros, store))

for i in store_euros:
    print(i)



--------------------------------------------------------- Filter ----------------------------------------------------------------------------------------------------------


# filter() =    creates a collection of elements from an iterable,
#               for which a function returns true
#
#               filter(function, iterable)



--------------------------------------------------------- Reduce ----------------------------------------------------------------------------------------------------------


# reduce() = apply a function to an iterable and reduce it to a single cumulative value.
#            performs function on first two elements and repeats process until 1 value remains
#
# reduce(function, iterable)

import functools

letters = ["H","E","L","L","O"]
word = functools.reduce(lambda x, y,:x + y,letters)
print(word)

# factorial = [5,4,3,2,1]
# result = functools.reduce(lambda x, y,:x * y,factorial)
# print(result)

--------------------------------------------------------- List comprehensions ----------------------------------------------------------------------------------------------------------


# list comprehension =  a way to create a new list with less syntax
#                       can mimic certain lambda functions, easier to read
#                       list = [expression for item in iterable]
#                       list = [expression for item in iterable if conditional]
#                       list = [expression if/else for item in iterable]
# --------------------------------------------------------------
squares = []                # create an empty list
for i in range(1,11):       # create a for loop
    squares.append(i * i)    # define what each loop iteration should do
print(squares)

# create a list AND defines what each loop iteration should do
squares = [i * i for i in range(1,11)]
print(squares)




--------------------------------------------------------- Dictionary comprehensions ----------------------------------------------------------------------------------------------------------


# dictionary comprehension = create dictionaries using an expression
#                            can replace for loops and certain lambda functions
#
# dictionary = {key: expression for (key,value) in iterable}
# dictionary = {key: expression for (key,value) in iterable if conditional}
# dictionary = {key: (if/else) for (key,value) in iterable}
# dictionary = {key: function(value) for (key,value) in iterable}
# -------------------------------------------------------------------------
cities_in_F = {'New York': 32, 'Boston': 75, 'Los Angeles': 100, 'Chicago': 50}
cities_in_C = {key: round((value-32)*(5/9)) for (key,value) in cities_in_F.items()}
print(cities_in_C)

# -------------------------------------------------------------------------
# weather = {'New York': "snowing", 'Boston': "sunny", 'Los Angeles': "sunny", 'Chicago': "cloudy"}
# sunny_weather = {key: value for (key,value) in weather.items() if value == "sunny"}
# print(sunny_weather)





--------------------------------------------------------- Zip function  ----------------------------------------------------------------------------------------------------------


# zip(*iterables) =  aggregate elements from two or more iterables (list, tuples, sets, etc.)
#                    creates a zip object with paired elements stored in tuples for each element

usernames = ["Dude", "Bro", "Mister"]
passwords = ("p@ssword", "abc123", "guest")
login_dates = ["1/1/2021","1/2/2021","1/3/2021"]

# --------------------------------------
users = list(zip(usernames,passwords))

for i in users:
    print(i)

# --------------------------------------
users = dict(zip(usernames,passwords))

for key,value in users.items():
    print(key+" : "+value)

# --------------------------------------
users = zip(usernames,passwords,login_dates)

for i in users:
    print(i)




--------------------------------------------------------- if _name_ == '__main__' ----------------------------------------------------------------------------------------------------------


# ***********************************
# if __name__ == '__main__'
# ***********************************

# y tho?
# 1. Module can be run as a standalone program
#    or
# 2. Module can be imported and used by other modules

#  Python interpreter sets "special variables", one of which is __name__
#  Python will assign the __name__ variable a value of '__main__' if it's
#  the initial module being run

def main():
    print("Hello!")


if __name__ == '__main__':
    main()

# ***********************************





--------------------------------------------------------- Time module  ----------------------------------------------------------------------------------------------------------


# ***************************************************************************
import time
# ***************************************************************************
print(time.ctime(0))    # convert a time expressed in seconds since epoch to a readable string
#                                        epoch = when your computer thinks time began (reference point)
print(time.time())      # return current seconds since epoch
print(time.ctime(time.time())) # will get current time

# ***************************************************************************
# time.strftime(format, time_object) = formats a time_object to a string
# time_object = time.localtime() # local time
# time_object = time.gmtime()  # UTC time
# local_time = time.strftime("%B %d %Y %H:%M:%S", time_object)
# print(local_time)

# ***************************************************************************
# time.strptime(string_string, format) = parses a string representing time/date and returns a struct_time object
# time_string = "20 April, 2020"
# time_object = time.strptime(time_string,"%d %B, %Y")
# print(time_object)

# ***************************************************************************
# time.asctime(time_tuple) = accepts a time_object or a tuple up to 9 elements and returns a string
# (year, month, day, hours, minutes, secs, #day of the week, #day of the year, dst)
# time_tuple = (2020, 4, 20, 4, 20, 0, 0, 0, 0)
# time_string = time.asctime(time_tuple)
# print(time_string)

# ***************************************************************************
# time.asctime(time_tuple) = accepts a time_object or a tuple up to 9 elements and return seconds since epoch
# (year, month, day, hours, minutes, secs, #day of the week, #day of the year, dst)
# time_tuple = (2020, 4, 20, 4, 20, 0, 0, 0, 0)
# time_string = time.mktime(time_tuple)
# print(time_string)

# ***************************************************************************





--------------------------------------------------------- Multithreading ----------------------------------------------------------------------------------------------------------


# ******************************************************
# Python threading tutorial
# ******************************************************
# thread =  a flow of execution. Like a separate order of instructions.
#                  However each thread takes a turn running to achieve concurrency
#                  GIL = (global interpreter lock),
#                  allows only one thread to hold the control of the Python interpreter at any one time

# cpu bound = program/task spends most of it's time waiting for internal events (CPU intensive)
#             use multiprocessing

# io bound = program/task spends most of it's time waiting for external events (user input, web scraping)
#            use multithreading

import threading
import time


def eat_breakfast():
    time.sleep(3)
    print("You eat breakfast")


def drink_coffee():
    time.sleep(4)
    print("You drank coffee")


def study():
    time.sleep(5)
    print("You finish studying")


x = threading.Thread(target=eat_breakfast, args=())
x.start()

y = threading.Thread(target=drink_coffee, args=())
y.start()

z = threading.Thread(target=study, args=())
z.start()

x.join()
y.join()
z.join()

print(threading.active_count())
print(threading.enumerate())
print(time.perf_counter())

# ******************************************************







--------------------------------------------------------- Daemon threads ----------------------------------------------------------------------------------------------------------


# ************************************************************
# Python daemon threads
# ************************************************************

# daemon thread = a thread that runs in the background, not important for program to run
#                 your program will not wait for daemon threads to complete before exiting
#                 non-daemon threads cannot normally be killed, stay alive until task is complete
#
#                 ex. background tasks, garbage collection, waiting for input, long running processes

import threading
import time


def timer():
    print()
    count = 0
    while True:
        time.sleep(1)
        count += 1
        print("logged in for: ", count, "seconds")


x = threading.Thread(target=timer, daemon=True)
x.start()

# x.setDaemon(True)
# print(x.isDaemon())

answer = input("Do you wish to exit?")

# ************************************************************








--------------------------------------------------------- Multiprocessing ----------------------------------------------------------------------------------------------------------


# ***********************************
# Python multiprocessing
# ***********************************
# multiprocessing = running tasks in parallel on different cpu cores, bypasses GIL used for threading
#                   multiprocessing = better for cpu bound tasks (heavy cpu usage)
#                   multithreading = better for io bound tasks (waiting around)
# ***********************************




--------------------------------------------------------- GUI windows  ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Labels ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Buttons ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Entrybox ----------------------------------------------------------------------------------------------------------









--------------------------------------------------------- Checkbox ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Radio buttons ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Scale ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Listbox ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Messagebox ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Colorchooser ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Text area ----------------------------------------------------------------------------------------------------------









--------------------------------------------------------- Open a file (file dialog) ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Save a file (file dialog) ----------------------------------------------------------------------------------------------------------










--------------------------------------------------------- Menubar ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Frames ----------------------------------------------------------------------------------------------------------









--------------------------------------------------------- New windows ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Window tabs ----------------------------------------------------------------------------------------------------------









--------------------------------------------------------- Grid ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Progress bar ----------------------------------------------------------------------------------------------------------










--------------------------------------------------------- Canvas ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Keyboard events   ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Mouse events   ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Drag & drop   ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Move images w/ keys   ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Animations    ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Multiple animations ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Clock program ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Send an email ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Run with command prompt ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- pip ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- py to exe ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Calculator program  ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Text editor program ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Tic tac toe game    ----------------------------------------------------------------------------------------------------------




--------------------------------------------------------- Snake game -----------------------------------------------------------------------------------------------------------




--------------------------------------------------------- Anfjfjfts -----------------------------------------------------------------------------------------------------------

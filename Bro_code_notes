                    |     https://www.youtube-nocookie.com/embed/XKHEtdqhLK8?playlist=XKHEtdqhLK8&autoplay=1&iv_load_policy=3&loop=1&modestbranding=1&start= |
                   /__________________________________________________________________________________________________________________________________________\




----------------------------------------------------- Strig Functions -----------------------------------------------------------------------------------------------------

name = "Eleftheria"

print(len(name))       # ---> for str length     				
print(type(name))            # ---> for value type
print(name.find("e"))         # ---> to find the position  of a char in the str
print(name.capitalize())    # ---> to capitalize the first letter
print(name.lower())        # ---> make all char lower
print(name.upper())      # ---> make all char upper
print(name.isdigit())      # --> returns True or False
print(name.isalpha())  # --> to check if there are only alphanumeric char -- if there is a space it will return False
print(name.count("ria"))    # --> to count how many char in the str
print(name.replace("e", "a")) # --> to replace a char with another char everywhere in the str
print(name*3)    # --> will print the str times the number we want


------------------------- Str slicing 

# slicing = create a substring by extracting elements from another string
#           indexing[] or slice()
#           [start:stop:step]

name = "Bro Code"

first_name = name[:3]       # [0:3]
last_name = name[4:]        # [4:end]
funky_name = name[::2]      # [0:end:2]
reversed_name = name[::-1]  # [0:end:-1]

print(reversed_name)

website1 = "http://google.com"
website2 = "http://wikipedia.com"

slice = slice(7,-4)

print(website1[slice])
print(website2[slice])

------------------------------------------------------------Int functions----------------------------------------------------------------------------------------------------------

import math

pi = 3.14
x = 1
y = 2
z = 3
 
print(round(pi))    # --> it rounds  the float number
print(math.ceil(pi))     # --> it rounds up
print(math.floor(pi))    # ---> it rounds down
print(abs(pi)) # --> for the absolute value of the number ( = how far is from 0 )
print(pow(pi, 3))    # --> raises to power - first we put the value we want( in this case pi, and then the power)
print(math.sqrt(pi)) # --> for square root
print(max(x, y, z))  # --> find the max value
print(min(x, y, z))   # ---> find the min value


------------------------------------------------------------Logical Operators ----------------------------------------------------------------------------------------------------------



Pinned by Bro Code
Bro Code
1 year ago
# logical operators (and,or,not) = used to check if two or more conditional statements is true

temp = int(input("What is the temperature outside?: "))

if temp >= 0 and temp <= 30:
    print("the temperature is good today!")
    print("go outside!")
elif temp < 0 or temp > 30:
    print("the temperature is bad today!")
    print("stay inside!")
    
    
    
    # to use operator "not" :
    
if not(temp >= 0 and temp <= 30):
    print("the temperature is good today!")
    print("go outside!")

------------------------------------------------------------For loop + sleep ----------------------------------------------------------------------------------------------------------


# for loop =    a statement that will execute it's block of code
#                      a limited amount of times
#
#                     while loop = unlimited
#                     for loop = limited

import time

#for i in range(10):
    #print(i+1)

#for i in range(50,100+1,2):
    #print(i)

#for i in "Bro Code":
    #print(i)

for seconds in range(10,0,-1):
    print(seconds)
    time.sleep(1)
print("Happy New Year!")

------------------------------------------------------------Nested loops ----------------------------------------------------------------------------------------------------------



# nested loops =    The "inner loop" will finish all of it's iterations before
#                   finishing one iteration of the "outer loop"

rows = int(input("How many rows?: "))
columns = int(input("How many columns?: "))
symbol = input("Enter a symbol to use: ")

for i in range(rows):
    for j in range(columns):
        print(symbol, end="")
    print()
    
    
--------------------------------------------------------- Loop control statements ----------------------------------------------------------------------------------------------------------


# Loop Control Statements = change a loops execution from its normal sequence

# break =       used to terminate the loop entirely
# continue =    skips to the next iteration of the loop.
# pass =        does nothing, acts as a placeholder

while True:
    name = input("Enter your name: ")
    if name != "":
        break

phone_number = "123-456-7890"
for i in phone_number:
    if i == "-":
        continue
    print(i, end="")

for i in range(1,21):
    if i == 13:
        pass
    else:
        print(i)



----------------------------------------------------------------- Lists ----------------------------------------------------------------------------------------------------------


# list = used to store multiple items in a single variable

food = ["pizza","hamburger","hotdog","spaghetti","pudding"]

food[0] = "sushi"

#food.append("ice cream")    # adds an element in the end of the list 
#food.remove("hotdog")
#food.pop()                    # deleted last element of the list 
#food.insert(0,"cake")      # insterts an element in any index position we want
#food.sort()              # sorts alphabetically
#food.clear()          # deleted all elements in the list 

for x in food:
    print(x)


-------------------------Python 2D lists / two dimensional list

# 2D lists = a list of lists

drinks = ["coffee","soda","tea"]
dinner = ["pizza","hamburger","hotdog"]
dessert = ["cake","ice cream"]

food = [drinks,dinner,dessert]

print(food[0][0])




--------------------------------------------------------- Tuples ----------------------------------------------------------------------------------------------------------

# tuple =   collection which is ordered and unchangeable
#                used to group together related data

student = ("Bro",21,"male")

print(student.count("Bro"))
print(student.index("male"))

for x in student:
    print(x)

if "Bro" in student:
    print("Bro is here!")





--------------------------------------------------------- Sets ----------------------------------------------------------------------------------------------------------

# set = collection which is unordered, unindexed. No duplicate values

utensils = {"fork","spoon","knife"}
dishes = {"bowl","plate","cup","knife"}

#utensils.add("napkin")   # adds an element in the set 
#utensils.remove("fork")   # removes an element from the set 
#utensils.clear()         # deletes all elements in the set 
#dishes.update(utensils)   # adds all elements from another set  ( if an elements exists in both sets, it will appear only once)
#dinner_table = utensils.union(dishes) # unites all the elements of two sets in a new set 

#print(dishes.difference(utensils))   # prints the different elements of two sets 
#print(utensils.intersection(dishes))   # prints the common elements of two sets 

for x in utensils:
    print(x)


--------------------------------------------------------- Dictionaries ----------------------------------------------------------------------------------------------------------

# dictionary comprehension = create dictionaries using an expression
#                            can replace for loops and certain lambda functions
#
# dictionary = {key: expression for (key,value) in iterable}
# dictionary = {key: expression for (key,value) in iterable if conditional}
# dictionary = {key: (if/else) for (key,value) in iterable}
# dictionary = {key: function(value) for (key,value) in iterable}
# -------------------------------------------------------------------------
cities_in_F = {'New York': 32, 'Boston': 75, 'Los Angeles': 100, 'Chicago': 50}
cities_in_C = {key: round((value-32)*(5/9)) for (key,value) in cities_in_F.items()}
print(cities_in_C)

# -------------------------------------------------------------------------
# weather = {'New York': "snowing", 'Boston': "sunny", 'Los Angeles': "sunny", 'Chicago': "cloudy"}
# sunny_weather = {key: value for (key,value) in weather.items() if value == "sunny"}
# print(sunny_weather)

# -------------------------------------------------------------------------
# cities = {'New York': 32, 'Boston': 75, 'Los Angeles': 100, 'Chicago': 50}
# desc_cities = {key: ("WARM" if value >= 40 else "COLD") for (key,value) in cities.items()}
# print(desc_cities)

# -------------------------------------------------------------------------
# def check_temp(value):
    # if value >= 70:
        # return "HOT"
    # elif 69 >= value >= 40:
        # return "WARM"
    # else:
        # return "COLD"


# cities = {'New York': 32, 'Boston': 75, 'Los Angeles': 100, 'Chicago': 50}
# desc_cities = {key: check_temp(value) for (key,value) in cities.items()}
# print(desc_cities)





--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------


# index operator [] = gives access to a sequenceâ€™s element (str,list,tuples)

name = "bro Code!"

#if(name[0].islower()):
   #name = name.capitalize()
  
first_name = name[:3].upper()
last_name = name[4:].lower()
last_character = name[-1]

print(first_name)
print(last_name)
print(last_character)




--------------------------------------------------------- Functions  ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- Return statement  ----------------------------------------------------------------------------------------------------------









--------------------------------------------------------- Keyword arguments----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Nested function calls ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- Variable scope ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- *args ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- **kwargs  ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- String format ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- Random numbers  ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- Exception handling ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- File detection ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- Read a file ----------------------------------------------------------------------------------------------------------






--------------------------------------------------------- Write a file ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------









--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------










--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------








--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------







--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------









--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------









--------------------------------------------------------- Intexing ----------------------------------------------------------------------------------------------------------
